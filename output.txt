6.6.2
All-pairs shortest path
Now, consider the following graph and its distance matrix:
D =








0
1
→
1
5
→
0
3
2
→
→
→
0
4
→
→
→
2
0
3
3
→
→
→
0








In general, we consider a graph G whose vertices are 1, 2, . . . , n, and will consider a sequence of
matrices
D = D(0), D(1), D(2), . . . , D(n),
where D(k) is the k-distance matrix, that is, its (i, j)th entry D(k)
i,j is the length of the shortest
path from vertex i to j, using only vertices 1, 2, . . . , k. (In short, k-distance between i and j.)
Make sure that D(0) = D makes sense, since Di,j is the distance between i and j without
using any other vertices as intermediates, i.e., only the edge (i, j). The matrix D(n) contains
the information that we are seeking, i.e., the shortest distances between two vertices.
Recursive structure of optimality
Note that we are using 1, 2, . . . , n as vertices. In the
following, vi’s are variables that take a value from 1, . . . , n.
Proposition 17. If v1v2 . . . vm . . . vl be a shortest path from v1 to vl, then the subpaths v1 . . . vm
and vm . . . vl are shortest paths. Also, the same thing holds for paths that uses only 1, . . . , k as
intermediates.
Proof. Suppose that v1v2 . . . vm→1vm is not shortest and there is a shorter path from v1v↑
2 . . . v↑
m→1vm.
Then there is a shorter path v1v↑
2 . . . v↑
m→1vm . . . vl, a contradiction. Therefore, v1v2 . . . vm→1vm
is the shortest, and the same argument holds for vm . . . vl. Also, the claim about paths using
only 1, . . . , k as intermediates is proved similarly.
By deﬁnition of D(k) and the above observations, the following holds.
Proposition 18.
D(k)
i,j = min
'
D(k→1)
i,j
, D(k→1)
i,k
+ D(k→1)
k,j
(
This (recursive) equation itself says how to compute D(n): use D(k→1) to compute D(k), for
k = 1, . . . , n ↑1. So we have a dynamic programming algorithm that computes D(n).
100
